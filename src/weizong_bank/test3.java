package weizong_bank;
/**
 * 小涛现在手上有从 1 到 4095 编号的数字方块，每个数字方块所具有的特征我们将其定义为其编号在二进制下为 1 的位置所具有的特征。
 * 例如 3 号数字方块我们就认为其具有 1 号特征和 2号特征，而 4 号数字方块我们认为其只具有 3 号特征。
 * 但每天小涛都会收到一堆新方块。由于新方块全部堆在门口，小涛想直接分类显然是很麻烦的一件事，因此小涛想用魔法磁铁来对这些方块进行初分类。
 * 魔法磁铁的具体用法如下：先使用手上的数字方块进行附魔，然后磁铁就会自动吸附上含有全部这些对应特征的方块，例如如果我们拿 5 号数字方块对魔法磁铁进行附魔，
 * 那么磁铁就可以吸附上编号为5(0101)2,7(0111)2,15(1111)2的方块，但编号1(0001)2,10(1010)2,14(1110)2的方块则无法被吸附（这些方块没有同时包含特征1，3类）。
 * 但使用魔法磁铁是一个很累的事，因此小涛只想用魔法磁铁先把这些堆在门口的方块收回家里，因此小涛想知道，最少使用几个数字方块对魔法磁铁附魔才能使得所有堆在门口的方块都能搬到房内。
 * (注意：没有0号方块和0号数字方块，附魔是用你手中有的编号从1到4095的数字方块而不是你当天收到的方块，即用来附魔的数字方块不需要是当天有的)
 *
 * 输入：
 * 第一行一个T(T≤10)，表示有T天，每天输入格式如下：
 * 第一行一个n(n≤105)表示有个n方块，接下来一行n个整数ai(ai∈[1,4095])，表示每个方块的编号。
 * 所有天数的方块加起来总数不会超过106。
 * 对于所有的数据，1≤n≤105
 *
 * 输出：
 * 对于每一天输出格式如下：
 * 输出第一行一个数字m，表示最少需要m种数字方块，
 * 接下来一行m个数字，从小到大依次给出数字方块编号，
 * 用空格隔开，如果有多种合法最小方案，输出字典序最小的方案。
 * A字典序比B小是指，A序列第一个与B序列数字不同的地方，
 * A的数字小于B，例如2,3,4,9小于2,3,8,9，1,2,3,4小于4,5,6,7。
 *
 * 2
 * 3
 * 1 2 3
 * 1
 * 1024
 *
 * 2
 * 1 2
 * 1
 * 1024
 */

import java.util.Scanner;

public class test3 {
    public static void main (String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
    }
}
